console.clear();
require("dotenv").config();
const {
  AccountId,
  TokenCreateTransaction,
  TokenType,
  PrivateKey,
  Client,
  Transaction,
  TransactionId, // <--- New Line
} = require("@hashgraph/sdk");

// Grab the OPERATOR_ID and OPERATOR_KEY from the .env file
const AliceAccountId = AccountId.fromString(process.env.ALICE_OPERATOR_ID);
const AlicePrivateKey = PrivateKey.fromString(process.env.ALICE_OPERATOR_KEY);

// Build Hedera testnet and mirror node client
const client = Client.forTestnet();
client.setOperator(AliceAccountId, AlicePrivateKey);

async function main() {
  // 1. Import the signed frozen transaction from Bob
  const signedBytes = Buffer.from([10,212,1,42,209,1,10,103,10,25,10,12,8,248,223,160,177,6,16,156,214,207,220,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,3,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,90,116,71,200,152,71,128,247,239,130,193,118,170,185,36,206,27,51,229,225,17,226,13,127,238,195,45,123,177,63,68,207,218,147,7,53,222,84,98,204,28,150,174,172,219,195,28,28,16,86,191,96,61,247,38,51,231,168,130,45,160,242,196,15,10,212,1,42,209,1,10,103,10,25,10,12,8,248,223,160,177,6,16,156,214,207,220,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,4,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,12,6,255,162,39,29,141,39,116,242,91,16,102,165,122,76,244,212,19,83,97,22,248,5,211,43,42,116,203,13,238,69,91,98,251,241,75,13,176,86,81,92,35,40,235,161,140,52,165,37,16,152,177,211,55,153,101,243,52,190,130,201,219,4,10,212,1,42,209,1,10,103,10,25,10,12,8,248,223,160,177,6,16,156,214,207,220,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,9,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,73,43,166,222,116,56,198,55,172,61,90,110,182,82,226,116,49,241,106,175,240,9,141,136,109,22,46,233,21,147,251,81,224,73,24,130,21,35,229,213,34,68,125,57,98,57,26,187,173,57,213,51,201,209,58,91,10,76,88,23,169,60,13,0,10,212,1,42,209,1,10,103,10,25,10,12,8,248,223,160,177,6,16,156,214,207,220,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,7,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,123,241,189,185,40,110,231,154,57,75,224,172,211,135,124,89,136,74,230,126,185,21,130,196,113,89,129,107,155,228,182,217,251,26,193,245,207,68,90,213,229,225,34,8,170,180,95,181,166,48,62,253,203,47,248,53,201,187,28,177,87,246,198,11,10,212,1,42,209,1,10,103,10,25,10,12,8,248,223,160,177,6,16,156,214,207,220,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,5,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,223,74,179,118,61,191,206,128,230,134,235,221,42,67,41,4,164,105,139,123,162,10,245,141,178,234,179,109,115,192,243,231,75,26,247,65,26,99,87,151,23,136,134,142,222,178,111,180,20,91,33,139,5,8,198,115,184,79,101,29,118,86,108,0,10,212,1,42,209,1,10,103,10,25,10,12,8,248,223,160,177,6,16,156,214,207,220,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,4,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,12,6,255,162,39,29,141,39,116,242,91,16,102,165,122,76,244,212,19,83,97,22,248,5,211,43,42,116,203,13,238,69,91,98,251,241,75,13,176,86,81,92,35,40,235,161,140,52,165,37,16,152,177,211,55,153,101,243,52,190,130,201,219,4,10,212,1,42,209,1,10,103,10,25,10,12,8,248,223,160,177,6,16,156,214,207,220,2,18,7,8,0,16,0,24,193,10,24,0,18,6,8,0,16,0,24,7,24,128,188,193,150,11,34,2,8,120,50,0,234,1,53,10,13,78,101,119,32,84,111,107,101,110,32,49,50,51,18,5,78,84,49,50,51,32,208,15,42,7,8,0,16,0,24,170,109,114,7,8,0,16,0,24,170,109,122,5,8,128,206,218,3,136,1,0,18,102,10,100,10,32,42,187,65,194,142,116,35,219,225,154,50,90,118,88,58,122,221,7,208,228,87,165,76,197,215,180,88,192,170,46,227,81,26,64,123,241,189,185,40,110,231,154,57,75,224,172,211,135,124,89,136,74,230,126,185,21,130,196,113,89,129,107,155,228,182,217,251,26,193,245,207,68,90,213,229,225,34,8,170,180,95,181,166,48,62,253,203,47,248,53,201,187,28,177,87,246,198,11]);
 
  // 2. Alice signs the transaction
  const signedTxFromBytes = Transaction.fromBytes(signedBytes);
  const doubleSignedTx = await signedTxFromBytes.sign(AlicePrivateKey);

  // 3. Alice executes the transaction and pays the transaction fees. Note: Alice must submit the transaction with 3min of Bob signing it unless Bob designates a different TX timestamp.
  const txResponse = await doubleSignedTx.execute(client);
  const receipt = await txResponse.getReceipt(client);
  console.log("TransactionId: " + txResponse.transactionId);
  console.log("Transaction status: " + receipt.status.toString());
  console.log("Created tokenId: " + receipt.tokenId);

  process.exit();
}

main();
